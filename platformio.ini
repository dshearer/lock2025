; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


[env]

# Lock
[env:lock]
# Board: Adafruit Feather M0 RFM69HCW Packet Radio (915 MHz)
# CPU: ATSAMD21G18 ARM Cortex M0
platform = atmelsam
board = adafruit_feather_m0
framework = arduino
build_src_filter = +<*> -<remote/**>
lib_deps =
    adafruit/Adafruit Motor Shield V2 Library@^1.1.3
    rocketscream/Low-Power@^1.81
    thomasfredericks/Bounce2@^2.72
extra_scripts = hooks.py
monitor_port = /dev/cu.usbmodem1101

# Get current fuse settings: `avrdude -p m328p -c usbtiny -U lfuse:r:-:h -U hfuse:r:-:h -U efuse:r:-:h`


# Choosing the clock settings:
# - NOT low-frequency crystal oscillator (it's optimized for use with a 32.768kHz watch crystal)

# To program the real remote board, you need to hold the radio's CS/CSS/NSS pin high

# Remote
[env:remote]
# CPU: ATmega328P
platform = atmelavr
board = pro8MHzatmega328
framework = arduino
; Use ISP programmer instead of serial
upload_protocol = usbtiny
board_build.f_cpu = 8000000UL # 8 MHz
# Based on Arduino Pro Mini Atmega328 8Mhz:
# (`pio run -t fuses`)
board_fuses.lfuse = 0xFF # Low power crystal oscillator / LOW {SUT_CKSEL=EXTXOSC_8MHZ_XX_16KCK_14CK_65MS, CKOUT=CLEAR, CKDIV8=CLEAR}
board_fuses.hfuse = 0xDA # HIGH {BOOTRST=SET, BOOTSZ=1024W_3C00, EESAVE=CLEAR, WDTON=CLEAR, SPIEN=SET, DWEN=CLEAR, RSTDISBL=CLEAR}
board_fuses.efuse = 0xFD # EXTENDED {BODLEVEL=2V7}
build_src_filter = +<*> -<lock/**>
; monitor_port = /dev/cu.usbmodem1101
upload_flags =
    -v
    -e # erase flash before programming (need this to avoid verification errors)